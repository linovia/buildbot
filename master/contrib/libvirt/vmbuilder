#! /usr/bin/env python

"""
This script can be used to generate an Ubuntu VM that is suitable for use by the libvirt backend of buildbot.

It creates a buildbot slave and then changes the buildbot.tac to get its username from the hostname. The hostname is set by
changing the DHCP script.

See network.xml for how to map a MAC address to an IP address and a hostname. You can load that configuration on to your master by running::

    virsh net-define network.xml

Note that the VM's also need their MAC address set, and configuring to use the new network, or this won't work..
"""

import os, platform, tempfile

if platform.machine() == "x86_64":
    arch = "amd64"
else:
    arch = "i386"

postboot = """\
#!/bin/sh
chroot $1 addgroup --system minion
chroot $1 adduser ubuntu sudo
chroot $1 adduser --system --home /var/local/buildbot --shell /bin/bash --ingroup minion --disabled-password --disabled-login minion

chroot $1 easy_install pip
chroot $1 pip install  "buildbot==0.8.7p1" --no-deps
chroot $1 pip install  "buildbot-slave==0.8.7p1" --no-deps

mkdir -p $1/var/local/buildbot
chroot $1 chown minion: /var/local/buildbot

chroot $1 sudo -u minion /usr/bin/buildslave create-slave /var/local/buildbot %(master_host)s:%(master_port)s %(slave)s %(slave_password)s

cat > $1/etc/default/buildslave << HERE
SLAVE_ENABLED[1]=1
SLAVE_NAME[1]="minion"
SLAVE_USER[1]="minion"
SLAVE_BASEDIR[1]="/var/local/buildbot"
SLAVE_OPTIONS[1]=""
SLAVE_PREFIXCMD[1]=""
HERE

cat > $1/etc/init.d/buildslave << HERE
#!/bin/bash

### Maintain compatibility with chkconfig
# chkconfig: 2345 83 17
# description: buildslave

### BEGIN INIT INFO
# Provides:          buildslave
# Required-Start:    \$remote_fs
# Required-Stop:     \$remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin
SLAVE_RUNNER=/usr/local/bin/buildslave

. /lib/lsb/init-functions

# Source buildslave configuration
[[ -r /etc/default/buildslave ]] && . /etc/default/buildslave

if [[ ! -x \${SLAVE_RUNNER} ]]; then
    log_failure_msg "does not exist or not an executable file: \${SLAVE_RUNNER}"
    exit 1
fi

function is_enabled() {
    ANSWER=\`echo \$1|tr "[:upper:]" "[:lower:]"\`
    [[ "\$ANSWER" == "yes" ]] || [[ "\$ANSWER" == "true" ]] || [[ "\$ANSWER" ==  "1" ]]
    return \$?
}

function is_disabled() {
    ANSWER=\`echo \$1|tr "[:upper:]" "[:lower:]"\`
    [[ "\$ANSWER" == "no" ]] || [[ "\$ANSWER" == "false" ]] || [[ "\$ANSWER" ==  "0" ]]
    return \$?
}


function slave_config_valid() {
    # Function validates buildmaster instance startup variables based on array
    # index
    local errors=0
    local index=\$1

    if ! is_enabled "\${SLAVE_ENABLED[\$index]}" && ! is_disabled "\${SLAVE_ENABLED[\$index]}" ; then
        log_warning_msg "buildmaster #\${i}: invalid enabled status"
        errors=\$((\$errors+1))
    fi

    if [[ -z \${SLAVE_NAME[\$index]} ]]; then
        log_failure_msg "buildmaster #\${i}: no name"
        errors=\$((\$errors+1))
    fi

    if [[ -z \${SLAVE_USER[\$index]} ]]; then
        log_failure_msg "buildmaster #\${i}: no run user specified"
        errors=\$( (\$errors+1) )
    elif ! getent passwd \${SLAVE_USER[\$index]} >/dev/null; then
        log_failure_msg "buildmaster #\${i}: unknown user \${SLAVE_USER[\$index]}"
        errors=\$((\$errors+1))
    fi

    if [[ ! -d "\${SLAVE_BASEDIR[\$index]}" ]]; then
        log_failure_msg "buildmaster \${i}: basedir does not exist \${SLAVE_BASEDIR[\$index]}"
        errors=\$((\$errors+1))
    fi

    return \$errors
}

function check_config() {
    itemcount="\${#SLAVE_ENABLED[@]}
               \${#SLAVE_NAME[@]}
               \${#SLAVE_USER[@]}
               \${#SLAVE_BASEDIR[@]}
               \${#SLAVE_OPTIONS[@]}
               \${#SLAVE_PREFIXCMD[@]}"

    if [[ \$(echo "\$itemcount" | tr -d ' ' | sort -u | wc -l) -ne 1 ]]; then
        log_failure_msg "SLAVE_* arrays must have an equal number of elements!"
        return 1
    fi

    errors=0
    for i in \$( seq \${#SLAVE_ENABLED[@]} ); do
        if is_disabled "\${SLAVE_ENABLED[\$i]}" ; then
            log_warning_msg "buildslave #\${i}: disabled"
            continue
        fi
        slave_config_valid \$i
        errors=\$((\$errors+\$?))
    done

    [[ \$errors == 0 ]]; return \$?
}

check_config || exit \$?

function iscallable () { type \$1 2>/dev/null | grep -q 'shell function'; }

function slave_op () {
    op=\$1 ; mi=\$2

    \${SLAVE_PREFIXCMD[\$mi]} \
    su -s /bin/sh \
    -c "\$SLAVE_RUNNER \$op --quiet \${SLAVE_OPTIONS[\$mi]} \${SLAVE_BASEDIR[\$mi]}" \
    - \${SLAVE_USER[\$mi]}
    return \$?
}

function do_op () {
    errors=0
    for i in \$( seq \${#SLAVE_ENABLED[@]} ); do
        if is_disabled "\${SLAVE_ENABLED[\$i]}" ; then
            continue
        fi

        # Some rhels don't come with all the lsb goodies
        if iscallable log_daemon_msg; then
	        log_daemon_msg "\$3 \"\${SLAVE_NAME[\$i]}\""
            if eval \$1 \$2 \$i; then
                log_end_msg 0
            else
                log_end_msg 1
                errors=\$((\$errors+1))
            fi
        else
            if eval \$1 \$2 \$i; then
                log_success_msg "\$3 \"\${SLAVE_NAME[\$i]}\""
            else
                log_failure_msg "\$3 \"\${SLAVE_NAME[\$i]}\""
                errors=\$((\$errors+1))
            fi
        fi
    done
    return \$errors
}

case "\$1" in
    start)
        do_op "slave_op" "start" "Starting buildslave"
        exit \$?
        ;;
    stop)
        do_op "slave_op" "stop" "Stopping buildslave"
        exit \$?
        ;;
    reload)
        do_op "slave_op" "reload" "Reloading buildslave"
        exit \$?
        ;;
    restart|force-reload)
        do_op "slave_op" "restart" "Restarting buildslave"
        exit \$?
        ;;
    *)
        echo "Usage: \$0 {start|stop|restart|reload|force-reload}"
        exit 1
        ;;
esac

exit 0
HERE

chroot $1 chmod 755 /etc/init.d/buildslave 
chroot $1 update-rc.d buildslave defaults

cat > $1/var/local/buildbot/buildbot.tac << HERE
import os
import socket

from twisted.application import service
from buildslave.bot import BuildSlave

basedir = r'/var/local/buildbot'
rotateLength = 1000000
maxRotatedFiles = None

# if this is a relocatable tac file, get the directory containing the TAC
if basedir == '.':
    import os.path
    basedir = os.path.abspath(os.path.dirname(__file__))

# note: this line is matched against to check that this is a buildslave
# directory; do not edit it.
application = service.Application('buildslave')

buildmaster_host = '%(master_host)s'
port = %(master_port)s
slavename = socket.gethostname()
passwd = "%(slave_password)s"
keepalive = 600
usepty = 0
umask = None
maxdelay = 300

s = BuildSlave(buildmaster_host, port, slavename, passwd, basedir,
               keepalive, usepty, umask=umask, maxdelay=maxdelay)
s.setServiceParent(application)
HERE

cat > $1/etc/dhcp/dhclient-exit-hooks.d/update-hostname << HERE
if [ x\$reason != xBOUND ] && [ x\$reason != xREBIND ] && [ x\$reason != xREBOOT ]; then exit; fi
echo Updating hostname: \$new_host_name
hostname \$new_host_name
echo Starting buildbot
/usr/local/bin/buildslave stop || true
/usr/local/bin/buildslave start
HERE

cat > $1/etc/udev/rules.d/virtio.rules << HERE
KERNEL=="vda*", SYMLINK+="sda%%n"
HERE
"""

class VMBuilder:

    """ Class that executes ubuntu-vm-builder with appropriate options """

    postboot = postboot

    defaults = {
        "rootsize": 8192,
        "mem": 512,
        "domain": 'linovia.net',
        "hostname": "minion1",
        "arch": arch,
        "variant": "minbase",
        "components": "main,universe,multiverse,restricted",
        "lang": "en_GB.UTF-8",
        "timezone": "Europe/Paris",
        "execscript": os.path.realpath(os.path.join(os.curdir, "postboot.sh")),
        "addpkg": [
            "standard^", "server^", "gpgv", "openssh-server", "subversion", "acpid", "avahi-daemon", "sudo", "net-tools", "isc-dhcp-client", "python-setuptools", "python-dateutil", "git"
            ],
    }

    def __init__(self, hypervisor="kvm", suite="precise", destdir="ubuntu", **kw):
        self.hypervisor = hypervisor
        self.suite = suite
        self.destdir = destdir
        self.options = self.defaults.copy()
        self.options.update(**kw)
        f = tempfile.NamedTemporaryFile(delete=False, prefix="/var/tmp/")
        print >>f, self.postboot % {
            'master_host': '192.168.201.1',
            'master_port': '9989',
            'slave': 'example-slave',
            'slave_password': 'pass',
        }
        f.close()
        os.chmod(f.name, 0755)
        self.options['execscript'] = f.name

    def build(self):
        optstring = []
        for k, v in self.options.items():
            if type(v) == type([]):
                for i in v:
                    if i:
                        optstring.append("--%s=%s" % (k, i))
            else:
                if v:
                    optstring.append("--%s=%s" % (k, v))
        execute=("ubuntu-vm-builder %s %s -d%s %s" % (
                    self.hypervisor,
                    self.suite,
                    self.destdir,
                    " ".join(optstring)))
        print execute
        os.system(execute)

if __name__ == "__main__":
    import sys, socket, optparse

    parser = optparse.OptionParser(usage="%prog [options] project")
    parser.add_option("-p", "--proxy", help="http proxy URL")
    (options, args) = parser.parse_args()
    #builder = VMBuilder(proxy=options.proxy, mirror="http://ubuntu.mirrors.ovh.net/ftp.ubuntu.com/ubuntu")
    builder = VMBuilder(proxy=options.proxy, mirror="http://ubuntu.mirrors.ovh.net/ftp.ubuntu.com/ubuntu", libvirt="qemu:///system")
    builder.build()


